import React, { useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';

const ScopeDisplay = ({ 
  dataPoints, // Array of { time: number_ms, voltage: number_V }
  voltsPerDiv, 
  timePerDiv, 
  verticalOffset,
  triggerLevel, // Voltage value for the trigger line
  numVerticalDivs = 8, 
  numHorizontalDivs = 10,
  sampleRate // Hz, used to calculate total time span if dataPoints don't have time
}) => {

  const yDomain = useMemo(() => {
    const mid = verticalOffset;
    const halfRange = (voltsPerDiv * numVerticalDivs) / 2;
    return [mid - halfRange, mid + halfRange];
  }, [voltsPerDiv, numVerticalDivs, verticalOffset]);

  const xDomain = useMemo(() => {
    if (dataPoints && dataPoints.length > 0 && dataPoints[0].hasOwnProperty('time')) {
      // If points have time, derive from timePerDiv
      // This assumes dataPoints are already windowed correctly for display
      const totalTimeSpan = timePerDiv * numHorizontalDivs;
      // Find the min time in the current display window
      // This part needs careful coordination with how dataPoints are populated
      // For now, let's assume dataPoints[0].time is the start of the window
      const startTime = dataPoints.length > 0 ? dataPoints[0].time : 0;
      return [startTime, startTime + totalTimeSpan];
    } else if (sampleRate && dataPoints && dataPoints.length > 0) {
      // Fallback if points don't have time, use sampleRate (less ideal for triggered display)
      const totalSamples = dataPoints.length;
      const totalTimeSpanMs = (totalSamples / sampleRate) * 1000;
      return [0, totalTimeSpanMs];
    }
    return [0, timePerDiv * numHorizontalDivs]; // Default if no data
  }, [dataPoints, timePerDiv, numHorizontalDivs, sampleRate]);
  
  const yTicks = useMemo(() => {
    const ticks = [];
    const [minY, maxY] = yDomain;
    for (let i = 0; i <= numVerticalDivs; i++) {
      ticks.push(minY + i * voltsPerDiv);
    }
    return ticks.filter(tick => tick >= minY && tick <= maxY);
  }, [yDomain, voltsPerDiv, numVerticalDivs]);

  const xTicks = useMemo(() => {
    const ticks = [];
    const [minX, maxX] = xDomain;
    const totalTimeSpan = maxX - minX;
    if (totalTimeSpan <= 0) return [0];
    for (let i = 0; i <= numHorizontalDivs; i++) {
      ticks.push(minX + i * (totalTimeSpan / numHorizontalDivs));
    }
    return ticks;
  }, [xDomain, numHorizontalDivs]);

  return (
    <div className="h-[400px] md:h-[500px] bg-gray-950 p-4 rounded-lg shadow-inner border border-gray-700">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={dataPoints} margin={{ top: 10, right: 20, left: -20, bottom: 10 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" verticalFill={['#1A202C50']} horizontalFill={['#1A202C50']} />
          <XAxis 
            dataKey="time" 
            type="number" 
            domain={xDomain} 
            ticks={xTicks}
            tickFormatter={(tick) => `${tick.toFixed(1)}ms`}
            stroke="#718096"
            tick={{ fontSize: 10 }}
          />
          <YAxis 
            type="number" 
            domain={yDomain} 
            ticks={yTicks}
            tickFormatter={(tick) => `${tick.toFixed(2)}V`}
            stroke="#718096"
            tick={{ fontSize: 10 }}
            width={50}
          />
          <Tooltip 
            contentStyle={{ backgroundColor: 'rgba(30, 41, 59, 0.9)', border: '1px solid #4A5568', borderRadius: '0.5rem' }}
            labelStyle={{ color: '#E2E8F0', fontWeight: 'bold' }}
            itemStyle={{ color: '#63B3ED' }}
            formatter={(value, name) => [`${value.toFixed(3)}V`, "Voltage"]}
            labelFormatter={(label) => `Time: ${label.toFixed(2)}ms`}
          />
          {triggerLevel !== null && typeof triggerLevel === 'number' && (
            <ReferenceLine y={triggerLevel} stroke="#F6AD55" strokeDasharray="4 4" strokeWidth={1.5}>
              <Legend content={() => <span className="text-orange-400 text-xs absolute right-0 -top-1">Trigger: {triggerLevel.toFixed(2)}V</span>} />
            </ReferenceLine>
          )}
          <Line 
            type="monotone" 
            dataKey="voltage" 
            stroke="#4FD1C5" // Cyan
            strokeWidth={1.5} 
            dot={false} 
            isAnimationActive={false} // Essential for performance with real-time data
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ScopeDisplay;